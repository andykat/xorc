//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
namespace xorc
{
	public class Neuron{
		public List<Edge> inputEdges;
		public List<Edge> outputEdges;
		public int inputCounter;
		public double sumWV;
		public double value;
		public Neuron()
		{
			inputEdges = new List<Edge> ();
			outputEdges = new List<Edge> ();
			value = 0.0;
			sumWV = 0.0;
			inputCounter = 0;
		}
		public void reset()
		{
			value = 0.0;
			int disabled = 0;
			for (int i=0; i<inputEdges.Count; i++) {
				if (!inputEdges [i].isEnabled) {
					disabled++;
				}
			}
			inputCounter = inputEdges.Count - disabled;
			sumWV = 0.0;
		}
		
		
		public void addInput(Edge e){
			inputEdges.Add (e);
		}
		public void addOutput(Edge e){
			outputEdges.Add (e);
		}
		
		//adds signal from input, reduces number of inputs not yet added
		public void addValue (double value, double weight){
			sumWV += value * weight;
			inputCounter--;
		}
		
		public void computeValue()
		{
			double e2z = Math.Pow (Math.E, 2.0 * sumWV);
			value = (e2z - 1) / (e2z + 1);
		}
	}
}

